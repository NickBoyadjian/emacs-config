;; -*- mode: emacs-lisp; eval: (progn (pp-buffer) (indent-buffer)) -*-
((def-persp nil ((def-buffer "core.clj" "/home/nick/development/emailnlp/src/emailnlp/core.clj" clojure-mode) (def-buffer "emailnlp<src>" "~/development/emailnlp/src/emailnlp/" dired-mode) (def-buffer "src" "~/development/emailnlp/src/" dired-mode) (def-buffer "emailnlp<development>" "~/development/emailnlp/" dired-mode) (def-buffer "org-loaddefs.el" "/home/nick/.emacs.d/elpa/org-plus-contrib-20200810/org-loaddefs.el" emacs-lisp-mode)) (def-wconf (((min-height . 4) (min-width . 10) (min-height-ignore . 3) (min-width-ignore . 4) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 68) (min-pixel-width . 80) (min-pixel-height-ignore . 51) (min-pixel-width-ignore . 32) (min-pixel-height-safe . 17) (min-pixel-width-safe . 16)) leaf (pixel-width . 1904) (pixel-height . 1035) (total-width . 238) (total-height . 61) (normal-height . 1.0) (normal-width . 1.0) (buffer "core.clj" (selected . t) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 0 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 62) (start . 1)) (prev-buffers ("emailnlp<src>" 1 235) ("core.clj" 1 62) ("src" 1 226) ("emailnlp<development>" 1 674) ("*spacemacs*" 1 3654) ("*scratch*" 1 1)))) (def-params ((gui-eyebrowse-window-configs (1 (((min-height . 4) (min-width . 10) (min-height-ignore . 3) (min-width-ignore . 4) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 68) (min-pixel-width . 80) (min-pixel-height-ignore . 51) (min-pixel-width-ignore . 32) (min-pixel-height-safe . 17) (min-pixel-width-safe . 16)) leaf (pixel-width . 1904) (pixel-height . 1035) (total-width . 238) (total-height . 61) (normal-height . 1.0) (normal-width . 1.0) (buffer "core.clj" (selected . t) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 0 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 62) (start . 1)) (prev-buffers ("emailnlp<src>" 1 235) ("core.clj" 1 62) ("src" 1 226) ("emailnlp<development>" 1 674) ("*spacemacs*" 1 3654) ("*scratch*" 1 1))) "")) (gui-eyebrowse-current-slot . 1) (gui-eyebrowse-last-slot . 1))) t nil nil))